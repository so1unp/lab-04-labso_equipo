buf.c: ejemplo de productor-consumidor haciendo uso
de un buffer limitado.
no utiliza mecanismos de sincronización para el acceso
al buffer. 
Esto ocasiona condiciones de carrera.
Modificar el programa para sincronizar el acceso al
buffer, empleando semáforos y mutexs.

Utilizar las siguientes funciones para sincronización:

Crear un mutex: pthread_mutex_init()
Inicializar un semáforo: sem_init()
Tomar un semáforo: sem_wait()
Liberar un semáforo: sem_post()
Tomar un mutex: pthread_mutex_lock()
Liberar un mutex: pthread_mutex_unlock()
Eliminar un semáforo: sem_destroy()
Eliminar un mutex: pthread_mutex_destroy()

Que problema hay?
buffer limitado, falta de sincronizacion para el acceso
al buffer, condiciones de carrera
Que hacer? 
Modificar buf.c para sincronizar el acceso al buffer
Como hacer?
con semaforos y mutexs

Crear un mutex: pthread_mutex_init()
Inicializar un semáforo: sem_init()
Tomar un semáforo: sem_wait()
Liberar un semáforo: sem_post()
Tomar un mutex: pthread_mutex_lock()
Liberar un mutex: pthread_mutex_unlock()
Eliminar un semáforo: sem_destroy()
Eliminar un mutex: pthread_mutex_destroy()

El mutex se utiliza para garantizar que solo un hilo a
la vez pueda acceder y modificar el buffer compartido,
protegiendo así la sección crítica en la que los hilos
leen o escriben en el buffer. Sin el mutex, los hilos
podrían corromper los datos del buffer al intentar 
acceder a él simultáneamente.

dos structs
buffer Tamaño y *buf
params wait_prod wait_cons items buffer

los wait son los tiempos de espera de los 